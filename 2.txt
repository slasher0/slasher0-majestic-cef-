(() => {
  var e = {
    766: (e, n) => {
      var o;
      !function () {
        "use strict";

        var t = function () {
          this.init();
        };

        t.prototype = {
          init: function () {
            var e = this || r;
            return e._counter = 1e3, e._html5AudioPool = [], e.html5PoolSize = 10, e._codecs = {}, e._howls = [], e._muted = false, e._volume = 1, e._canPlayEvent = "canplaythrough", e._navigator = "undefined" != typeof window && window.navigator ? window.navigator : null, e.masterGain = null, e.noAudio = false, e.usingWebAudio = true, e.autoSuspend = true, e.ctx = null, e.autoUnlock = true, e._setup(), e;
          },
          volume: function (e) {
            var n = this || r;

            if (e = parseFloat(e), n.ctx || c(), undefined !== e && e >= 0 && e <= 1) {
              if (n._volume = e, n._muted) return n;
              n.usingWebAudio && n.masterGain.gain.setValueAtTime(e, r.ctx.currentTime);

              for (var o = 0; o < n._howls.length; o++) if (!n._howls[o]._webAudio) for (var t = n._howls[o]._getSoundIds(), a = 0; a < t.length; a++) {
                var i = n._howls[o]._soundById(t[a]);

                i && i._node && (i._node.volume = i._volume * e);
              }

              return n;
            }

            return n._volume;
          },
          mute: function (e) {
            var n = this || r;
            n.ctx || c(), n._muted = e, n.usingWebAudio && n.masterGain.gain.setValueAtTime(e ? 0 : n._volume, r.ctx.currentTime);

            for (var o = 0; o < n._howls.length; o++) if (!n._howls[o]._webAudio) for (var t = n._howls[o]._getSoundIds(), a = 0; a < t.length; a++) {
              var i = n._howls[o]._soundById(t[a]);

              i && i._node && (i._node.muted = !!e || i._muted);
            }

            return n;
          },
          stop: function () {
            for (var e = this || r, n = 0; n < e._howls.length; n++) e._howls[n].stop();

            return e;
          },
          unload: function () {
            for (var e = this || r, n = e._howls.length - 1; n >= 0; n--) e._howls[n].unload();

            return e.usingWebAudio && e.ctx && undefined !== e.ctx.close && (e.ctx.close(), e.ctx = null, c()), e;
          },
          codecs: function (e) {
            return (this || r)._codecs[e.replace(/^x-/, "")];
          },
          _setup: function () {
            var e = this || r;
            if (e.state = e.ctx && e.ctx.state || "suspended", e._autoSuspend(), !e.usingWebAudio) if ("undefined" != typeof Audio) try {
              undefined === new Audio().oncanplaythrough && (e._canPlayEvent = "canplay");
            } catch (n) {
              e.noAudio = true;
            } else e.noAudio = true;

            try {
              new Audio().muted && (e.noAudio = true);
            } catch (e) {}

            return e.noAudio || e._setupCodecs(), e;
          },
          _setupCodecs: function () {
            var e = this || r,
                n = null;

            try {
              n = "undefined" != typeof Audio ? new Audio() : null;
            } catch (n) {
              return e;
            }

            if (!n || "function" != typeof n.canPlayType) return e;
            var o = n.canPlayType("audio/mpeg;").replace(/^no$/, ""),
                t = e._navigator ? e._navigator.userAgent : "",
                a = t.match(/OPR\/([0-6].)/g),
                i = a && parseInt(a[0].split("/")[1], 10) < 33,
                u = -1 !== t.indexOf("Safari") && -1 === t.indexOf("Chrome"),
                d = t.match(/Version\/(.*?) /),
                s = u && d && parseInt(d[1], 10) < 15;
            return e._codecs = {
              mp3: !(i || !o && !n.canPlayType("audio/mp3;").replace(/^no$/, "")),
              mpeg: !!o,
              opus: !!n.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""),
              ogg: !!n.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
              oga: !!n.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
              wav: !!(n.canPlayType('audio/wav; codecs="1"') || n.canPlayType("audio/wav")).replace(/^no$/, ""),
              aac: !!n.canPlayType("audio/aac;").replace(/^no$/, ""),
              caf: !!n.canPlayType("audio/x-caf;").replace(/^no$/, ""),
              m4a: !!(n.canPlayType("audio/x-m4a;") || n.canPlayType("audio/m4a;") || n.canPlayType("audio/aac;")).replace(/^no$/, ""),
              m4b: !!(n.canPlayType("audio/x-m4b;") || n.canPlayType("audio/m4b;") || n.canPlayType("audio/aac;")).replace(/^no$/, ""),
              mp4: !!(n.canPlayType("audio/x-mp4;") || n.canPlayType("audio/mp4;") || n.canPlayType("audio/aac;")).replace(/^no$/, ""),
              weba: !(s || !n.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, "")),
              webm: !(s || !n.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, "")),
              dolby: !!n.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ""),
              flac: !!(n.canPlayType("audio/x-flac;") || n.canPlayType("audio/flac;")).replace(/^no$/, "")
            }, e;
          },
          _unlockAudio: function () {
            var e = this || r;

            if (!e._audioUnlocked && e.ctx) {
              e._audioUnlocked = false, e.autoUnlock = false, e._mobileUnloaded || 44100 === e.ctx.sampleRate || (e._mobileUnloaded = true, e.unload()), e._scratchBuffer = e.ctx.createBuffer(1, 1, 22050);

              var n = function (o) {
                for (; e._html5AudioPool.length < e.html5PoolSize;) try {
                  var t = new Audio();
                  t._unlocked = true, e._releaseHtml5Audio(t);
                } catch (o) {
                  e.noAudio = true;
                  break;
                }

                for (var r = 0; r < e._howls.length; r++) if (!e._howls[r]._webAudio) for (var a = e._howls[r]._getSoundIds(), i = 0; i < a.length; i++) {
                  var u = e._howls[r]._soundById(a[i]);

                  u && u._node && !u._node._unlocked && (u._node._unlocked = true, u._node.load());
                }

                e._autoResume();

                var d = e.ctx.createBufferSource();
                d.buffer = e._scratchBuffer, d.connect(e.ctx.destination), undefined === d.start ? d.noteOn(0) : d.start(0), "function" == typeof e.ctx.resume && e.ctx.resume(), d.onended = function () {
                  d.disconnect(0), e._audioUnlocked = true, document.removeEventListener("touchstart", n, true), document.removeEventListener("touchend", n, true), document.removeEventListener("click", n, true), document.removeEventListener("keydown", n, true);

                  for (var o = 0; o < e._howls.length; o++) e._howls[o]._emit("unlock");
                };
              };

              return document.addEventListener("touchstart", n, true), document.addEventListener("touchend", n, true), document.addEventListener("click", n, true), document.addEventListener("keydown", n, true), e;
            }
          },
          _obtainHtml5Audio: function () {
            var e = this || r;
            if (e._html5AudioPool.length) return e._html5AudioPool.pop();
            var n = new Audio().play();
            return n && "undefined" != typeof Promise && (n instanceof Promise || "function" == typeof n.then) && n.catch(function () {
              console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.");
            }), new Audio();
          },
          _releaseHtml5Audio: function (e) {
            var n = this || r;
            return e._unlocked && n._html5AudioPool.push(e), n;
          },
          _autoSuspend: function () {
            var e = this;

            if (e.autoSuspend && e.ctx && undefined !== e.ctx.suspend && r.usingWebAudio) {
              for (var n = 0; n < e._howls.length; n++) if (e._howls[n]._webAudio) for (var o = 0; o < e._howls[n]._sounds.length; o++) if (!e._howls[n]._sounds[o]._paused) return e;

              return e._suspendTimer && clearTimeout(e._suspendTimer), e._suspendTimer = setTimeout(function () {
                if (e.autoSuspend) {
                  e._suspendTimer = null, e.state = "suspending";

                  var n = function () {
                    e.state = "suspended", e._resumeAfterSuspend && (delete e._resumeAfterSuspend, e._autoResume());
                  };

                  e.ctx.suspend().then(n, n);
                }
              }, 3e4), e;
            }
          },
          _autoResume: function () {
            var e = this;
            if (e.ctx && undefined !== e.ctx.resume && r.usingWebAudio) return "running" === e.state && "interrupted" !== e.ctx.state && e._suspendTimer ? (clearTimeout(e._suspendTimer), e._suspendTimer = null) : "suspended" === e.state || "running" === e.state && "interrupted" === e.ctx.state ? (e.ctx.resume().then(function () {
              e.state = "running";

              for (var n = 0; n < e._howls.length; n++) e._howls[n]._emit("resume");
            }), e._suspendTimer && (clearTimeout(e._suspendTimer), e._suspendTimer = null)) : false && (e._resumeAfterSuspend = true), e;
          }
        };

        var r = new t(),
            a = function (e) {
          e.src && 0 !== e.src.length ? this.init(e) : console.error("An array of source files must be passed with any new Howl.");
        };

        a.prototype = {
          init: function (e) {
            var n = this;
            return r.ctx || c(), n._autoplay = e.autoplay || false, n._format = "string" != typeof e.format ? e.format : [e.format], n._html5 = e.html5 || false, n._muted = e.mute || false, n._loop = e.loop || false, n._pool = e.pool || 5, n._preload = "boolean" != typeof e.preload && "metadata" !== e.preload || e.preload, n._rate = e.rate || 1, n._sprite = e.sprite || {}, n._src = "string" != typeof e.src ? e.src : [e.src], n._volume = undefined !== e.volume ? e.volume : 1, n._xhr = {
              method: e.xhr && e.xhr.method ? e.xhr.method : "GET",
              headers: e.xhr && e.xhr.headers ? e.xhr.headers : null,
              withCredentials: !(!e.xhr || !e.xhr.withCredentials) && e.xhr.withCredentials
            }, n._duration = 0, n._state = "unloaded", n._sounds = [], n._endTimers = {}, n._queue = [], n._playLock = false, n._onend = e.onend ? [{
              fn: e.onend
            }] : [], n._onfade = e.onfade ? [{
              fn: e.onfade
            }] : [], n._onload = e.onload ? [{
              fn: e.onload
            }] : [], n._onloaderror = e.onloaderror ? [{
              fn: e.onloaderror
            }] : [], n._onplayerror = e.onplayerror ? [{
              fn: e.onplayerror
            }] : [], n._onpause = e.onpause ? [{
              fn: e.onpause
            }] : [], n._onplay = e.onplay ? [{
              fn: e.onplay
            }] : [], n._onstop = e.onstop ? [{
              fn: e.onstop
            }] : [], n._onmute = e.onmute ? [{
              fn: e.onmute
            }] : [], n._onvolume = e.onvolume ? [{
              fn: e.onvolume
            }] : [], n._onrate = e.onrate ? [{
              fn: e.onrate
            }] : [], n._onseek = e.onseek ? [{
              fn: e.onseek
            }] : [], n._onunlock = e.onunlock ? [{
              fn: e.onunlock
            }] : [], n._onresume = [], n._webAudio = r.usingWebAudio && !n._html5, undefined !== r.ctx && r.ctx && r.autoUnlock && r._unlockAudio(), r._howls.push(n), n._autoplay && n._queue.push({
              event: "play",
              action: function () {
                n.play();
              }
            }), n._preload && "none" !== n._preload && n.load(), n;
          },
          load: function () {
            var e = this,
                n = null;
            if (r.noAudio) e._emit("loaderror", null, "No audio support.");else {
              "string" == typeof e._src && (e._src = [e._src]);

              for (var o = 0; o < e._src.length; o++) {
                var t, a;
                if (e._format && e._format[o]) t = e._format[o];else {
                  if ("string" != typeof (a = e._src[o])) {
                    e._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");

                    continue;
                  }

                  (t = /^data:audio\/([^;,]+);/i.exec(a)) || (t = /\.([^.]+)$/.exec(a.split("?", 1)[0])), t && (t = t[1].toLowerCase());
                }

                if (t || console.warn('No file extension was found. Consider using the "format" property or specify an extension.'), t && r.codecs(t)) {
                  n = e._src[o];
                  break;
                }
              }

              if (n) return e._src = n, e._state = "loading", "https:" === window.location.protocol && "http:" === n.slice(0, 5) && (e._html5 = true, e._webAudio = false), new i(e), e._webAudio && d(e), e;

              e._emit("loaderror", null, "No codec support for selected audio sources.");
            }
          },
          play: function (e, n) {
            var o = this,
                t = null;
            if ("number" == typeof e) t = e, e = null;else {
              if (false && "loaded" === o._state && !o._sprite[null]) return null;

              if (undefined === null && (e = "__default", !o._playLock)) {
                for (var a = 0, i = 0; i < o._sounds.length; i++) o._sounds[i]._paused && !o._sounds[i]._ended && (a++, t = o._sounds[i]._id);

                1 === a ? e = null : t = null;
              }
            }
            var u = t ? o._soundById(t) : o._inactiveSound();
            if (!u) return null;

            if (t && !e && (e = u._sprite || "__default"), "loaded" !== o._state) {
              u._sprite = e, u._ended = false;
              var d = u._id;
              return o._queue.push({
                event: "play",
                action: function () {
                  o.play(d);
                }
              }), d;
            }

            if (t && !u._paused) return n || o._loadQueue("play"), u._id;
            o._webAudio && r._autoResume();

            var s = Math.max(0, u._seek > 0 ? u._seek : o._sprite[e][0] / 1e3),
                l = Math.max(0, (o._sprite[e][0] + o._sprite[e][1]) / 1e3 - s),
                _ = 1e3 * l / Math.abs(u._rate),
                c = o._sprite[e][0] / 1e3,
                p = (o._sprite[e][0] + o._sprite[e][1]) / 1e3;

            u._sprite = e, u._ended = false;

            var f = function () {
              u._paused = false, u._seek = s, u._start = c, u._stop = p, u._loop = !(!u._loop && !o._sprite[e][2]);
            };

            if (!(s >= p)) {
              var m = u._node;

              if (o._webAudio) {
                var v = function () {
                  o._playLock = false, f(), o._refreshBuffer(u);
                  var e = u._muted || o._muted ? 0 : u._volume;
                  m.gain.setValueAtTime(e, r.ctx.currentTime), u._playStart = r.ctx.currentTime, undefined === m.bufferSource.start ? u._loop ? m.bufferSource.noteGrainOn(0, s, 86400) : m.bufferSource.noteGrainOn(0, s, l) : u._loop ? m.bufferSource.start(0, s, 86400) : m.bufferSource.start(0, s, l), _ !== Infinity && (o._endTimers[u._id] = setTimeout(o._ended.bind(o, u), _)), n || setTimeout(function () {
                    o._emit("play", u._id), o._loadQueue();
                  }, 0);
                };

                "running" === r.state && "interrupted" !== r.ctx.state ? v() : (o._playLock = true, o.once("resume", v), o._clearTimer(u._id));
              } else {
                var h = function () {
                  m.currentTime = s, m.muted = u._muted || o._muted || r._muted || m.muted, m.volume = u._volume * r.volume(), m.playbackRate = u._rate;

                  try {
                    var t = m.play();
                    if (t && "undefined" != typeof Promise && (t instanceof Promise || "function" == typeof t.then) ? (o._playLock = true, f(), t.then(function () {
                      o._playLock = false, m._unlocked = true, n ? o._loadQueue() : o._emit("play", u._id);
                    }).catch(function () {
                      o._playLock = false, o._emit("playerror", u._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."), u._ended = true, u._paused = true;
                    })) : n || (o._playLock = false, f(), o._emit("play", u._id)), m.playbackRate = u._rate, m.paused) return void o._emit("playerror", u._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");
                    "__default" !== e || u._loop ? o._endTimers[u._id] = setTimeout(o._ended.bind(o, u), _) : (o._endTimers[u._id] = function () {
                      o._ended(u), m.removeEventListener("ended", o._endTimers[u._id], false);
                    }, m.addEventListener("ended", o._endTimers[u._id], false));
                  } catch (e) {
                    o._emit("playerror", u._id, e);
                  }
                };

                "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA" === m.src && (m.src = o._src, m.load());
                var y = window && window.ejecta || !m.readyState && r._navigator.isCocoonJS;
                if (m.readyState >= 3 || y) h();else {
                  o._playLock = true, o._state = "loading";

                  var A = function () {
                    o._state = "loaded", h(), m.removeEventListener(r._canPlayEvent, A, false);
                  };

                  m.addEventListener(r._canPlayEvent, A, false), o._clearTimer(u._id);
                }
              }

              return u._id;
            }

            o._ended(u);
          },
          pause: function (e) {
            var n = this;
            if ("loaded" !== n._state || n._playLock) return n._queue.push({
              event: "pause",
              action: function () {
                n.pause(e);
              }
            }), n;

            for (var o = n._getSoundIds(e), t = 0; t < o.length; t++) {
              n._clearTimer(o[t]);

              var r = n._soundById(o[t]);

              if (r && !r._paused && (r._seek = n.seek(o[t]), r._rateSeek = 0, r._paused = true, n._stopFade(o[t]), r._node)) if (n._webAudio) {
                if (!r._node.bufferSource) continue;
                undefined === r._node.bufferSource.stop ? r._node.bufferSource.noteOff(0) : r._node.bufferSource.stop(0), n._cleanBuffer(r._node);
              } else isNaN(r._node.duration) && r._node.duration !== Infinity || r._node.pause();
              arguments[1] || n._emit("pause", r ? r._id : null);
            }

            return n;
          },
          stop: function (e, n) {
            var o = this;
            if ("loaded" !== o._state || o._playLock) return o._queue.push({
              event: "stop",
              action: function () {
                o.stop(e);
              }
            }), o;

            for (var t = o._getSoundIds(e), r = 0; r < t.length; r++) {
              o._clearTimer(t[r]);

              var a = o._soundById(t[r]);

              a && (a._seek = a._start || 0, a._rateSeek = 0, a._paused = true, a._ended = true, o._stopFade(t[r]), a._node && (o._webAudio ? a._node.bufferSource && (undefined === a._node.bufferSource.stop ? a._node.bufferSource.noteOff(0) : a._node.bufferSource.stop(0), o._cleanBuffer(a._node)) : isNaN(a._node.duration) && a._node.duration !== Infinity || (a._node.currentTime = a._start || 0, a._node.pause(), a._node.duration === Infinity && o._clearSound(a._node))), n || o._emit("stop", a._id));
            }

            return o;
          },
          mute: function (e, n) {
            var o = this;
            if ("loaded" !== o._state || o._playLock) return o._queue.push({
              event: "mute",
              action: function () {
                o.mute(e, n);
              }
            }), o;

            if (undefined === n) {
              if ("boolean" != typeof e) return o._muted;
              o._muted = e;
            }

            for (var t = o._getSoundIds(n), a = 0; a < t.length; a++) {
              var i = o._soundById(t[a]);

              i && (i._muted = e, i._interval && o._stopFade(i._id), o._webAudio && i._node ? i._node.gain.setValueAtTime(e ? 0 : i._volume, r.ctx.currentTime) : i._node && (i._node.muted = !!r._muted || e), o._emit("mute", i._id));
            }

            return o;
          },
          volume: function () {
            var e,
                n,
                o,
                t = this,
                a = arguments;
            if (0 === a.length) return t._volume;

            if (1 === a.length || 2 === a.length && undefined === a[1]) {
              var i = t._getSoundIds(),
                  u = i.indexOf(a[0]);

              u >= 0 ? n = parseInt(a[0], 10) : e = parseFloat(a[0]);
            } else a.length >= 2 && (e = parseFloat(a[0]), n = parseInt(a[1], 10));

            if (!(undefined !== e && e >= 0 && e <= 1)) return (o = n ? t._soundById(n) : t._sounds[0]) ? o._volume : 0;
            if ("loaded" !== t._state || t._playLock) return t._queue.push({
              event: "volume",
              action: function () {
                t.volume.apply(t, a);
              }
            }), t;
            undefined === n && (t._volume = e), n = t._getSoundIds(n);

            for (var d = 0; d < n.length; d++) (o = t._soundById(n[d])) && (o._volume = e, a[2] || t._stopFade(n[d]), t._webAudio && o._node && !o._muted ? o._node.gain.setValueAtTime(e, r.ctx.currentTime) : o._node && !o._muted && (o._node.volume = e * r.volume()), t._emit("volume", o._id));

            return t;
          },
          fade: function (e, n, o, t) {
            var a = this;
            if ("loaded" !== a._state || a._playLock) return a._queue.push({
              event: "fade",
              action: function () {
                a.fade(e, n, o, t);
              }
            }), a;
            e = Math.min(Math.max(0, parseFloat(e)), 1), n = Math.min(Math.max(0, parseFloat(n)), 1), o = parseFloat(o), a.volume(e, t);

            for (var i = a._getSoundIds(t), u = 0; u < i.length; u++) {
              var d = a._soundById(i[u]);

              if (d) {
                if (t || a._stopFade(i[u]), a._webAudio && !d._muted) {
                  var s = r.ctx.currentTime,
                      l = s + o / 1e3;
                  d._volume = e, d._node.gain.setValueAtTime(e, s), d._node.gain.linearRampToValueAtTime(n, l);
                }

                a._startFadeInterval(d, e, n, o, i[u], undefined === t);
              }
            }

            return a;
          },
          _startFadeInterval: function (e, n, o, t, r, a) {
            var i = this,
                u = n,
                d = o - n,
                s = Math.abs(d / .01),
                l = Math.max(4, s > 0 ? t / s : t),
                _ = Date.now();

            e._fadeTo = o, e._interval = setInterval(function () {
              var r = (Date.now() - _) / t;
              _ = Date.now(), u += d * r, u = Math.round(100 * u) / 100, u = d < 0 ? Math.max(o, u) : Math.min(o, u), i._webAudio ? e._volume = u : i.volume(u, e._id, true), a && (i._volume = u), (o < n && u <= o || o > n && u >= o) && (clearInterval(e._interval), e._interval = null, e._fadeTo = null, i.volume(o, e._id), i._emit("fade", e._id));
            }, l);
          },
          _stopFade: function (e) {
            var n = this,
                o = n._soundById(e);

            return o && o._interval && (n._webAudio && o._node.gain.cancelScheduledValues(r.ctx.currentTime), clearInterval(o._interval), o._interval = null, n.volume(o._fadeTo, e), o._fadeTo = null, n._emit("fade", e)), n;
          },
          loop: function () {
            var e,
                n,
                o,
                t = this,
                r = arguments;
            if (0 === r.length) return t._loop;

            if (1 === r.length) {
              if ("boolean" != typeof r[0]) return !!(o = t._soundById(parseInt(r[0], 10))) && o._loop;
              e = r[0], t._loop = e;
            } else 2 === r.length && (e = r[0], n = parseInt(r[1], 10));

            for (var a = t._getSoundIds(n), i = 0; i < a.length; i++) (o = t._soundById(a[i])) && (o._loop = e, t._webAudio && o._node && o._node.bufferSource && (o._node.bufferSource.loop = e, e && (o._node.bufferSource.loopStart = o._start || 0, o._node.bufferSource.loopEnd = o._stop, t.playing(a[i]) && (t.pause(a[i], true), t.play(a[i], true)))));

            return t;
          },
          rate: function () {
            var e,
                n,
                o,
                t = this,
                a = arguments;
            if (0 === a.length) n = t._sounds[0]._id;else if (1 === a.length) {
              var i = t._getSoundIds(),
                  u = i.indexOf(a[0]);

              u >= 0 ? n = parseInt(a[0], 10) : e = parseFloat(a[0]);
            } else 2 === a.length && (e = parseFloat(a[0]), n = parseInt(a[1], 10));
            if ("number" != typeof e) return (o = t._soundById(n)) ? o._rate : t._rate;
            if ("loaded" !== t._state || t._playLock) return t._queue.push({
              event: "rate",
              action: function () {
                t.rate.apply(t, a);
              }
            }), t;
            undefined === n && (t._rate = e), n = t._getSoundIds(n);

            for (var d = 0; d < n.length; d++) if (o = t._soundById(n[d])) {
              t.playing(n[d]) && (o._rateSeek = t.seek(n[d]), o._playStart = t._webAudio ? r.ctx.currentTime : o._playStart), o._rate = e, t._webAudio && o._node && o._node.bufferSource ? o._node.bufferSource.playbackRate.setValueAtTime(e, r.ctx.currentTime) : o._node && (o._node.playbackRate = e);

              var s = t.seek(n[d]),
                  l = (t._sprite[o._sprite][0] + t._sprite[o._sprite][1]) / 1e3 - s,
                  _ = 1e3 * l / Math.abs(o._rate);

              !t._endTimers[n[d]] && o._paused || (t._clearTimer(n[d]), t._endTimers[n[d]] = setTimeout(t._ended.bind(t, o), _)), t._emit("rate", o._id);
            }

            return t;
          },
          seek: function () {
            var e,
                n,
                o = this,
                t = arguments;
            if (0 === t.length) o._sounds.length && (n = o._sounds[0]._id);else if (1 === t.length) {
              var a = o._getSoundIds(),
                  i = a.indexOf(t[0]);

              i >= 0 ? n = parseInt(t[0], 10) : o._sounds.length && (n = o._sounds[0]._id, e = parseFloat(t[0]));
            } else 2 === t.length && (e = parseFloat(t[0]), n = parseInt(t[1], 10));
            if (undefined === n) return 0;
            if ("number" == typeof e && ("loaded" !== o._state || o._playLock)) return o._queue.push({
              event: "seek",
              action: function () {
                o.seek.apply(o, t);
              }
            }), o;

            var u = o._soundById(n);

            if (u) {
              if (!("number" == typeof e && e >= 0)) {
                if (o._webAudio) {
                  var d = o.playing(n) ? r.ctx.currentTime - u._playStart : 0,
                      s = u._rateSeek ? u._rateSeek - u._seek : 0;
                  return u._seek + (s + d * Math.abs(u._rate));
                }

                return u._node.currentTime;
              }

              var l = o.playing(n);
              l && o.pause(n, true), u._seek = e, u._ended = false, o._clearTimer(n), o._webAudio || !u._node || isNaN(u._node.duration) || (u._node.currentTime = e);

              var _ = function () {
                l && o.play(n, true), o._emit("seek", n);
              };

              if (l && !o._webAudio) {
                var c = function () {
                  o._playLock ? setTimeout(c, 0) : _();
                };

                setTimeout(c, 0);
              } else _();
            }

            return o;
          },
          playing: function (e) {
            var n = this;

            if ("number" == typeof e) {
              var o = n._soundById(e);

              return !!o && !o._paused;
            }

            for (var t = 0; t < n._sounds.length; t++) if (!n._sounds[t]._paused) return true;

            return false;
          },
          duration: function (e) {
            var n = this,
                o = n._duration,
                t = n._soundById(e);

            return t && (o = n._sprite[t._sprite][1] / 1e3), o;
          },
          state: function () {
            return this._state;
          },
          unload: function () {
            for (var e = this, n = e._sounds, o = 0; o < n.length; o++) n[o]._paused || e.stop(n[o]._id), e._webAudio || (e._clearSound(n[o]._node), n[o]._node.removeEventListener("error", n[o]._errorFn, false), n[o]._node.removeEventListener(r._canPlayEvent, n[o]._loadFn, false), n[o]._node.removeEventListener("ended", n[o]._endFn, false), r._releaseHtml5Audio(n[o]._node)), delete n[o]._node, e._clearTimer(n[o]._id);

            var t = r._howls.indexOf(e);

            t >= 0 && r._howls.splice(t, 1);
            var a = true;

            for (o = 0; o < r._howls.length; o++) if (r._howls[o]._src === e._src || e._src.indexOf(r._howls[o]._src) >= 0) {
              a = false;
              break;
            }

            return u && false && delete u[e._src], r.noAudio = false, e._state = "unloaded", e._sounds = [], e = null, null;
          },
          on: function (e, n, o, t) {
            var r = this["_on" + e];
            return "function" == typeof n && r.push(t ? {
              id: o,
              fn: n,
              once: t
            } : {
              id: o,
              fn: n
            }), this;
          },
          off: function (e, n, o) {
            var t = this,
                r = t["_on" + e],
                a = 0;
            if ("number" == typeof n && (o = n, n = null), n || o) for (a = 0; a < r.length; a++) {
              var i = o === r[a].id;

              if (n === r[a].fn && i || !n && i) {
                r.splice(a, 1);
                break;
              }
            } else if (e) t["_on" + e] = [];else {
              var u = Object.keys(t);

              for (a = 0; a < u.length; a++) 0 === u[a].indexOf("_on") && Array.isArray(t[u[a]]) && (t[u[a]] = []);
            }
            return t;
          },
          once: function (e, n, o) {
            return this.on(e, n, o, 1), this;
          },
          _emit: function (e, n, o) {
            for (var t = this, r = t["_on" + e], a = r.length - 1; a >= 0; a--) r[a].id && r[a].id !== n && "load" !== e || (setTimeout(function (e) {
              e.call(this, n, o);
            }.bind(t, r[a].fn), 0), r[a].once && t.off(e, r[a].fn, r[a].id));

            return t._loadQueue(e), t;
          },
          _loadQueue: function (e) {
            var n = this;

            if (n._queue.length > 0) {
              var o = n._queue[0];
              o.event === e && (n._queue.shift(), n._loadQueue()), e || o.action();
            }

            return n;
          },
          _ended: function (e) {
            var n = this,
                o = e._sprite;
            if (!n._webAudio && e._node && !e._node.paused && !e._node.ended && e._node.currentTime < e._stop) return setTimeout(n._ended.bind(n, e), 100), n;
            var t = !(!e._loop && !n._sprite[o][2]);

            if (n._emit("end", e._id), !n._webAudio && t && n.stop(e._id, true).play(e._id), n._webAudio && t) {
              n._emit("play", e._id), e._seek = e._start || 0, e._rateSeek = 0, e._playStart = r.ctx.currentTime;
              var a = 1e3 * (e._stop - e._start) / Math.abs(e._rate);
              n._endTimers[e._id] = setTimeout(n._ended.bind(n, e), a);
            }

            return n._webAudio && !t && (e._paused = true, e._ended = true, e._seek = e._start || 0, e._rateSeek = 0, n._clearTimer(e._id), n._cleanBuffer(e._node), r._autoSuspend()), n._webAudio || t || n.stop(e._id, true), n;
          },
          _clearTimer: function (e) {
            var n = this;

            if (n._endTimers[e]) {
              if ("function" != typeof n._endTimers[e]) clearTimeout(n._endTimers[e]);else {
                var o = n._soundById(e);

                o && o._node && o._node.removeEventListener("ended", n._endTimers[e], false);
              }
              delete n._endTimers[e];
            }

            return n;
          },
          _soundById: function (e) {
            for (var n = this, o = 0; o < n._sounds.length; o++) if (e === n._sounds[o]._id) return n._sounds[o];

            return null;
          },
          _inactiveSound: function () {
            var e = this;

            e._drain();

            for (var n = 0; n < e._sounds.length; n++) if (e._sounds[n]._ended) return e._sounds[n].reset();

            return new i(e);
          },
          _drain: function () {
            var e = this,
                n = e._pool,
                o = 0,
                t = 0;

            if (!(e._sounds.length < n)) {
              for (t = 0; t < e._sounds.length; t++) e._sounds[t]._ended && o++;

              for (t = e._sounds.length - 1; t >= 0; t--) {
                if (o <= n) return;
                e._sounds[t]._ended && (e._webAudio && e._sounds[t]._node && e._sounds[t]._node.disconnect(0), e._sounds.splice(t, 1), o--);
              }
            }
          },
          _getSoundIds: function (e) {
            if (undefined === e) {
              for (var n = [], o = 0; o < this._sounds.length; o++) n.push(this._sounds[o]._id);

              return n;
            }

            return [e];
          },
          _refreshBuffer: function (e) {
            return e._node.bufferSource = r.ctx.createBufferSource(), e._node.bufferSource.buffer = u[this._src], e._panner ? e._node.bufferSource.connect(e._panner) : e._node.bufferSource.connect(e._node), e._node.bufferSource.loop = e._loop, e._loop && (e._node.bufferSource.loopStart = e._start || 0, e._node.bufferSource.loopEnd = e._stop || 0), e._node.bufferSource.playbackRate.setValueAtTime(e._rate, r.ctx.currentTime), this;
          },
          _cleanBuffer: function (e) {
            var n = r._navigator && r._navigator.vendor.indexOf("Apple") >= 0;
            if (r._scratchBuffer && e.bufferSource && (e.bufferSource.onended = null, e.bufferSource.disconnect(0), n)) try {
              e.bufferSource.buffer = r._scratchBuffer;
            } catch (e) {}
            return e.bufferSource = null, this;
          },
          _clearSound: function (e) {
            /MSIE |Trident\//.test(r._navigator && r._navigator.userAgent) || (e.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA");
          }
        };

        var i = function (e) {
          this._parent = e, this.init();
        };

        i.prototype = {
          init: function () {
            var e = this,
                n = e._parent;
            return e._muted = n._muted, e._loop = n._loop, e._volume = n._volume, e._rate = n._rate, e._seek = 0, e._paused = true, e._ended = true, e._sprite = "__default", e._id = ++r._counter, n._sounds.push(e), e.create(), e;
          },
          create: function () {
            var e = this,
                n = e._parent,
                o = r._muted || e._muted || e._parent._muted ? 0 : e._volume;
            return n._webAudio ? (e._node = undefined === r.ctx.createGain ? r.ctx.createGainNode() : r.ctx.createGain(), e._node.gain.setValueAtTime(o, r.ctx.currentTime), e._node.paused = true, e._node.connect(r.masterGain)) : false || (e._node = r._obtainHtml5Audio(), e._errorFn = e._errorListener.bind(e), e._node.addEventListener("error", e._errorFn, false), e._loadFn = e._loadListener.bind(e), e._node.addEventListener(r._canPlayEvent, e._loadFn, false), e._endFn = e._endListener.bind(e), e._node.addEventListener("ended", e._endFn, false), e._node.src = n._src, e._node.preload = true === n._preload ? "auto" : n._preload, e._node.volume = o * r.volume(), e._node.load()), e;
          },
          reset: function () {
            var e = this,
                n = e._parent;
            return e._muted = n._muted, e._loop = n._loop, e._volume = n._volume, e._rate = n._rate, e._seek = 0, e._rateSeek = 0, e._paused = true, e._ended = true, e._sprite = "__default", e._id = ++r._counter, e;
          },
          _errorListener: function () {
            var e = this;
            e._parent._emit("loaderror", e._id, e._node.error ? e._node.error.code : 0), e._node.removeEventListener("error", e._errorFn, false);
          },
          _loadListener: function () {
            var e = this,
                n = e._parent;
            n._duration = Math.ceil(10 * e._node.duration) / 10, 0 === Object.keys(n._sprite).length && (n._sprite = {
              __default: [0, 1e3 * n._duration]
            }), "loaded" !== n._state && (n._state = "loaded", n._emit("load"), n._loadQueue()), e._node.removeEventListener(r._canPlayEvent, e._loadFn, false);
          },
          _endListener: function () {
            var e = this,
                n = e._parent;
            n._duration === Infinity && (n._duration = Math.ceil(10 * e._node.duration) / 10, n._sprite.__default[1] === Infinity && (n._sprite.__default[1] = 1e3 * n._duration), n._ended(e)), e._node.removeEventListener("ended", e._endFn, false);
          }
        };

        var u = {},
            d = function (e) {
          var n = e._src;
          if (u[n]) return e._duration = u[n].duration, void _(e);

          if (/^data:[^;]+;base64,/.test(n)) {
            for (var o = atob(n.split(",")[1]), t = new Uint8Array(o.length), r = 0; r < o.length; ++r) t[r] = o.charCodeAt(r);

            l(t.buffer, e);
          } else {
            var a = new XMLHttpRequest();
            a.open(e._xhr.method, n, true), a.withCredentials = e._xhr.withCredentials, a.responseType = "arraybuffer", e._xhr.headers && Object.keys(e._xhr.headers).forEach(function (n) {
              a.setRequestHeader(n, e._xhr.headers[n]);
            }), a.onload = function () {
              var n = (a.status + "")[0];
              "0" === n || "2" === n || "3" === n ? l(a.response, e) : e._emit("loaderror", null, "Failed loading audio file with status: " + a.status + ".");
            }, a.onerror = function () {
              e._webAudio && (e._html5 = true, e._webAudio = false, e._sounds = [], delete u[n], e.load());
            }, s(a);
          }
        },
            s = function (e) {
          try {
            e.send();
          } catch (n) {
            e.onerror();
          }
        },
            l = function (e, n) {
          var o = function () {
            n._emit("loaderror", null, "Decoding audio data failed.");
          },
              t = function (e) {
            e && n._sounds.length > 0 ? (u[n._src] = e, _(n, e)) : o();
          };

          "undefined" != typeof Promise && 1 === r.ctx.decodeAudioData.length ? r.ctx.decodeAudioData(e).then(t).catch(o) : r.ctx.decodeAudioData(e, t, o);
        },
            _ = function (e, n) {
          n && !e._duration && (e._duration = n.duration), 0 === Object.keys(e._sprite).length && (e._sprite = {
            __default: [0, 1e3 * e._duration]
          }), "loaded" !== e._state && (e._state = "loaded", e._emit("load"), e._loadQueue());
        },
            c = function () {
          if (r.usingWebAudio) {
            try {
              "undefined" != typeof AudioContext ? r.ctx = new AudioContext() : "undefined" != typeof webkitAudioContext ? r.ctx = new webkitAudioContext() : r.usingWebAudio = false;
            } catch (e) {
              r.usingWebAudio = false;
            }

            r.ctx || (r.usingWebAudio = false);

            var e = /iP(hone|od|ad)/.test(r._navigator && r._navigator.platform),
                n = r._navigator && r._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),
                o = n ? parseInt(n[1], 10) : null;

            if (e && o && o < 9) {
              var t = /safari/.test(r._navigator && r._navigator.userAgent.toLowerCase());
              r._navigator && !t && (r.usingWebAudio = false);
            }

            r.usingWebAudio && (r.masterGain = undefined === r.ctx.createGain ? r.ctx.createGainNode() : r.ctx.createGain(), r.masterGain.gain.setValueAtTime(r._muted ? 0 : r._volume, r.ctx.currentTime), r.masterGain.connect(r.ctx.destination)), r._setup();
          }
        };

        undefined === (o = function () {
          return {
            Howler: r,
            Howl: a
          };
        }.apply(n, [])) || (e.exports = o), n.Howler = r, n.Howl = a, "undefined" != typeof global ? (global.HowlerGlobal = t, global.Howler = r, global.Howl = a, global.Sound = i) : "undefined" != typeof window && (window.HowlerGlobal = t, window.Howler = r, window.Howl = a, window.Sound = i);
      }(), function () {
        "use strict";

        var e;
        HowlerGlobal.prototype._pos = [0, 0, 0], HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0], HowlerGlobal.prototype.stereo = function (e) {
          var n = this;
          if (!n.ctx || !n.ctx.listener) return n;

          for (var o = n._howls.length - 1; o >= 0; o--) n._howls[o].stereo(e);

          return n;
        }, HowlerGlobal.prototype.pos = function (e, n, o) {
          var t = this;
          return t.ctx && t.ctx.listener ? (n = "number" != typeof n ? t._pos[1] : n, o = "number" != typeof o ? t._pos[2] : o, "number" != typeof e ? t._pos : (t._pos = [e, n, o], undefined !== t.ctx.listener.positionX ? (t.ctx.listener.positionX.setTargetAtTime(t._pos[0], Howler.ctx.currentTime, .1), t.ctx.listener.positionY.setTargetAtTime(t._pos[1], Howler.ctx.currentTime, .1), t.ctx.listener.positionZ.setTargetAtTime(t._pos[2], Howler.ctx.currentTime, .1)) : t.ctx.listener.setPosition(t._pos[0], t._pos[1], t._pos[2]), t)) : t;
        }, HowlerGlobal.prototype.orientation = function (e, n, o, t, r, a) {
          var i = this;
          if (!i.ctx || !i.ctx.listener) return i;
          var u = i._orientation;
          return n = "number" != typeof n ? u[1] : n, o = "number" != typeof o ? u[2] : o, t = "number" != typeof t ? u[3] : t, r = "number" != typeof r ? u[4] : r, a = "number" != typeof a ? u[5] : a, "number" != typeof e ? u : (i._orientation = [e, n, o, t, r, a], undefined !== i.ctx.listener.forwardX ? (i.ctx.listener.forwardX.setTargetAtTime(e, Howler.ctx.currentTime, .1), i.ctx.listener.forwardY.setTargetAtTime(n, Howler.ctx.currentTime, .1), i.ctx.listener.forwardZ.setTargetAtTime(o, Howler.ctx.currentTime, .1), i.ctx.listener.upX.setTargetAtTime(t, Howler.ctx.currentTime, .1), i.ctx.listener.upY.setTargetAtTime(r, Howler.ctx.currentTime, .1), i.ctx.listener.upZ.setTargetAtTime(a, Howler.ctx.currentTime, .1)) : i.ctx.listener.setOrientation(e, n, o, t, r, a), i);
        }, Howl.prototype.init = (e = Howl.prototype.init, function (n) {
          var o = this;
          return o._orientation = n.orientation || [1, 0, 0], o._stereo = n.stereo || null, o._pos = n.pos || null, o._pannerAttr = {
            coneInnerAngle: undefined !== n.coneInnerAngle ? n.coneInnerAngle : 360,
            coneOuterAngle: undefined !== n.coneOuterAngle ? n.coneOuterAngle : 360,
            coneOuterGain: undefined !== n.coneOuterGain ? n.coneOuterGain : 0,
            distanceModel: undefined !== n.distanceModel ? n.distanceModel : "inverse",
            maxDistance: undefined !== n.maxDistance ? n.maxDistance : 1e4,
            panningModel: undefined !== n.panningModel ? n.panningModel : "HRTF",
            refDistance: undefined !== n.refDistance ? n.refDistance : 1,
            rolloffFactor: undefined !== n.rolloffFactor ? n.rolloffFactor : 1
          }, o._onstereo = n.onstereo ? [{
            fn: n.onstereo
          }] : [], o._onpos = n.onpos ? [{
            fn: n.onpos
          }] : [], o._onorientation = n.onorientation ? [{
            fn: n.onorientation
          }] : [], e.call(this, n);
        }), Howl.prototype.stereo = function (e, o) {
          var t = this;
          if (!t._webAudio) return t;
          if ("loaded" !== t._state) return t._queue.push({
            event: "stereo",
            action: function () {
              t.stereo(e, o);
            }
          }), t;
          var r = undefined === Howler.ctx.createStereoPanner ? "spatial" : "stereo";

          if (undefined === o) {
            if ("number" != typeof e) return t._stereo;
            t._stereo = e, t._pos = [e, 0, 0];
          }

          for (var a = t._getSoundIds(o), i = 0; i < a.length; i++) {
            var u = t._soundById(a[i]);

            if (u) {
              if ("number" != typeof e) return u._stereo;
              u._stereo = e, u._pos = [e, 0, 0], u._node && (u._pannerAttr.panningModel = "equalpower", u._panner && u._panner.pan || n(u, r), "spatial" === r ? undefined !== u._panner.positionX ? (u._panner.positionX.setValueAtTime(e, Howler.ctx.currentTime), u._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime), u._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime)) : u._panner.setPosition(e, 0, 0) : u._panner.pan.setValueAtTime(e, Howler.ctx.currentTime)), t._emit("stereo", u._id);
            }
          }

          return t;
        }, Howl.prototype.pos = function (e, o, t, r) {
          var a = this;
          if (!a._webAudio) return a;
          if ("loaded" !== a._state) return a._queue.push({
            event: "pos",
            action: function () {
              a.pos(e, o, t, r);
            }
          }), a;

          if (o = "number" != typeof o ? 0 : o, t = "number" != typeof t ? -.5 : t, undefined === r) {
            if ("number" != typeof e) return a._pos;
            a._pos = [e, o, t];
          }

          for (var i = a._getSoundIds(r), u = 0; u < i.length; u++) {
            var d = a._soundById(i[u]);

            if (d) {
              if ("number" != typeof e) return d._pos;
              d._pos = [e, o, t], d._node && (d._panner && !d._panner.pan || n(d, "spatial"), undefined !== d._panner.positionX ? (d._panner.positionX.setValueAtTime(e, Howler.ctx.currentTime), d._panner.positionY.setValueAtTime(o, Howler.ctx.currentTime), d._panner.positionZ.setValueAtTime(t, Howler.ctx.currentTime)) : d._panner.setPosition(e, o, t)), a._emit("pos", d._id);
            }
          }

          return a;
        }, Howl.prototype.orientation = function (e, o, t, r) {
          var a = this;
          if (!a._webAudio) return a;
          if ("loaded" !== a._state) return a._queue.push({
            event: "orientation",
            action: function () {
              a.orientation(e, o, t, r);
            }
          }), a;

          if (o = "number" != typeof o ? a._orientation[1] : o, t = "number" != typeof t ? a._orientation[2] : t, undefined === r) {
            if ("number" != typeof e) return a._orientation;
            a._orientation = [e, o, t];
          }

          for (var i = a._getSoundIds(r), u = 0; u < i.length; u++) {
            var d = a._soundById(i[u]);

            if (d) {
              if ("number" != typeof e) return d._orientation;
              d._orientation = [e, o, t], d._node && (d._panner || (d._pos || (d._pos = a._pos || [0, 0, -.5]), n(d, "spatial")), undefined !== d._panner.orientationX ? (d._panner.orientationX.setValueAtTime(e, Howler.ctx.currentTime), d._panner.orientationY.setValueAtTime(o, Howler.ctx.currentTime), d._panner.orientationZ.setValueAtTime(t, Howler.ctx.currentTime)) : d._panner.setOrientation(e, o, t)), a._emit("orientation", d._id);
            }
          }

          return a;
        }, Howl.prototype.pannerAttr = function () {
          var e,
              o,
              t,
              r = this,
              a = arguments;
          if (!r._webAudio) return r;
          if (0 === a.length) return r._pannerAttr;

          if (1 === a.length) {
            if ("object" != typeof a[0]) return (t = r._soundById(parseInt(a[0], 10))) ? t._pannerAttr : r._pannerAttr;
            e = a[0], undefined === o && (e.pannerAttr || (e.pannerAttr = {
              coneInnerAngle: e.coneInnerAngle,
              coneOuterAngle: e.coneOuterAngle,
              coneOuterGain: e.coneOuterGain,
              distanceModel: e.distanceModel,
              maxDistance: e.maxDistance,
              refDistance: e.refDistance,
              rolloffFactor: e.rolloffFactor,
              panningModel: e.panningModel
            }), r._pannerAttr = {
              coneInnerAngle: undefined !== e.pannerAttr.coneInnerAngle ? e.pannerAttr.coneInnerAngle : r._coneInnerAngle,
              coneOuterAngle: undefined !== e.pannerAttr.coneOuterAngle ? e.pannerAttr.coneOuterAngle : r._coneOuterAngle,
              coneOuterGain: undefined !== e.pannerAttr.coneOuterGain ? e.pannerAttr.coneOuterGain : r._coneOuterGain,
              distanceModel: undefined !== e.pannerAttr.distanceModel ? e.pannerAttr.distanceModel : r._distanceModel,
              maxDistance: undefined !== e.pannerAttr.maxDistance ? e.pannerAttr.maxDistance : r._maxDistance,
              refDistance: undefined !== e.pannerAttr.refDistance ? e.pannerAttr.refDistance : r._refDistance,
              rolloffFactor: undefined !== e.pannerAttr.rolloffFactor ? e.pannerAttr.rolloffFactor : r._rolloffFactor,
              panningModel: undefined !== e.pannerAttr.panningModel ? e.pannerAttr.panningModel : r._panningModel
            });
          } else 2 === a.length && (e = a[0], o = parseInt(a[1], 10));

          for (var i = r._getSoundIds(o), u = 0; u < i.length; u++) if (t = r._soundById(i[u])) {
            var d = t._pannerAttr;
            d = {
              coneInnerAngle: undefined !== e.coneInnerAngle ? e.coneInnerAngle : d.coneInnerAngle,
              coneOuterAngle: undefined !== e.coneOuterAngle ? e.coneOuterAngle : d.coneOuterAngle,
              coneOuterGain: undefined !== e.coneOuterGain ? e.coneOuterGain : d.coneOuterGain,
              distanceModel: undefined !== e.distanceModel ? e.distanceModel : d.distanceModel,
              maxDistance: undefined !== e.maxDistance ? e.maxDistance : d.maxDistance,
              refDistance: undefined !== e.refDistance ? e.refDistance : d.refDistance,
              rolloffFactor: undefined !== e.rolloffFactor ? e.rolloffFactor : d.rolloffFactor,
              panningModel: undefined !== e.panningModel ? e.panningModel : d.panningModel
            };
            var s = t._panner;
            s ? (s.coneInnerAngle = d.coneInnerAngle, s.coneOuterAngle = d.coneOuterAngle, s.coneOuterGain = d.coneOuterGain, s.distanceModel = d.distanceModel, s.maxDistance = d.maxDistance, s.refDistance = d.refDistance, s.rolloffFactor = d.rolloffFactor, s.panningModel = d.panningModel) : (t._pos || (t._pos = r._pos || [0, 0, -.5]), n(t, "spatial"));
          }

          return r;
        }, Sound.prototype.init = function (e) {
          return function () {
            var n = this,
                o = n._parent;
            n._orientation = o._orientation, n._stereo = o._stereo, n._pos = o._pos, n._pannerAttr = o._pannerAttr, e.call(this), n._stereo ? o.stereo(n._stereo) : n._pos && o.pos(n._pos[0], n._pos[1], n._pos[2], n._id);
          };
        }(Sound.prototype.init), Sound.prototype.reset = function (e) {
          return function () {
            var n = this,
                o = n._parent;
            return n._orientation = o._orientation, n._stereo = o._stereo, n._pos = o._pos, n._pannerAttr = o._pannerAttr, n._stereo ? o.stereo(n._stereo) : n._pos ? o.pos(n._pos[0], n._pos[1], n._pos[2], n._id) : n._panner && (n._panner.disconnect(0), n._panner = undefined, o._refreshBuffer(n)), e.call(this);
          };
        }(Sound.prototype.reset);

        var n = function (e, n) {
          "spatial" === (n = n || "spatial") ? (e._panner = Howler.ctx.createPanner(), e._panner.coneInnerAngle = e._pannerAttr.coneInnerAngle, e._panner.coneOuterAngle = e._pannerAttr.coneOuterAngle, e._panner.coneOuterGain = e._pannerAttr.coneOuterGain, e._panner.distanceModel = e._pannerAttr.distanceModel, e._panner.maxDistance = e._pannerAttr.maxDistance, e._panner.refDistance = e._pannerAttr.refDistance, e._panner.rolloffFactor = e._pannerAttr.rolloffFactor, e._panner.panningModel = e._pannerAttr.panningModel, undefined !== e._panner.positionX ? (e._panner.positionX.setValueAtTime(e._pos[0], Howler.ctx.currentTime), e._panner.positionY.setValueAtTime(e._pos[1], Howler.ctx.currentTime), e._panner.positionZ.setValueAtTime(e._pos[2], Howler.ctx.currentTime)) : e._panner.setPosition(e._pos[0], e._pos[1], e._pos[2]), undefined !== e._panner.orientationX ? (e._panner.orientationX.setValueAtTime(e._orientation[0], Howler.ctx.currentTime), e._panner.orientationY.setValueAtTime(e._orientation[1], Howler.ctx.currentTime), e._panner.orientationZ.setValueAtTime(e._orientation[2], Howler.ctx.currentTime)) : e._panner.setOrientation(e._orientation[0], e._orientation[1], e._orientation[2])) : (e._panner = Howler.ctx.createStereoPanner(), e._panner.pan.setValueAtTime(e._stereo, Howler.ctx.currentTime)), e._panner.connect(e._node), e._paused || e._parent.pause(e._id, true).play(e._id, true);
        };
      }();
    }
  },
      n = {};

  function o(t) {
    var r = n[t];
    if (undefined !== r) return r.exports;
    var a = n[t] = {
      exports: {}
    };
    return e[t](a, a.exports, o), a.exports;
  }

  o.n = e => {
    var n = e && e.__esModule ? () => e.default : () => e;
    return o.d(n, {
      a: n
    }), n;
  }, o.d = (e, n) => {
    for (var t in n) o.o(n, t) && !o.o(e, t) && Object.defineProperty(e, t, {
      enumerable: true,
      get: n[t]
    });
  }, o.o = (e, n) => Object.prototype.hasOwnProperty.call(e, n), (() => {
    "use strict";

    var e = o(766);

    const n = "https://cdn2.majestic-files.com",
          t = {
      soundPool: {}
    },
          r = {
      px: null,
      py: null,
      pz: null,
      ofx: null,
      ofy: null,
      ofz: null,
      oux: null,
      ouy: null,
      ouz: null,
      adderValue: false
    },
          a = () => {
      const n = r;
      n.adderValue = !n.adderValue;
      const o = n.adderValue ? 1e-4 : 0;
      null != n.px && null != n.py && null != n.pz && e.Howler.pos(n.px + o, n.py + o, n.pz + o), null != n.ofx && null != n.ofy && null != n.ofz && null != n.oux && null != n.ouy && null != n.ouz && e.Howler.orientation(n.ofx + o, n.ofy + o, n.ofz + o, n.oux + o, n.ouy + o, n.ouz + o), requestAnimationFrame(a);
    };

    requestAnimationFrame(a);

    const i = e => {
      if ("string" == typeof e) try {
        return JSON.parse(e);
      } catch (n) {
        return e;
      }
      return e;
    };

    if (window.stopSound = e => {
      const n = t.soundPool[e];
      n && (n.stop(), delete t.soundPool[e], mp.trigger("animsounds.trigger", "onEnd", e));
    }, window.playHudSound = o => {
      const r = (o = i(o)).id;
      t.soundPool[r] && (t.soundPool[r].stop(), delete t.soundPool[r]);
      const a = new e.Howl({
        volume: null != o.volume ? parseFloat(o.volume) : .25,
        src: o.isCDN ? [`https://cdn.majestic-files.com/sounds/${o.sound}.ogg`] : [`${"https://cdn2.majestic-files.com"}/sounds/${o.sound}.ogg`],
        loop: !!o.loop,
        preload: true,
        buffer: false,
        onend: () => {
          o.loop || (delete t.soundPool[r], mp.trigger("animsounds.trigger", "onEnd", r));
        },

        onload() {
          if (!t.soundPool[r]) return delete t.soundPool[r];
          mp.trigger("animsounds.trigger", "onLoad", r);
        }

      });
      a.cData = o, t.soundPool[r] = a;
    }, window.play3DSound = o => {
      const r = (o = i(o)).id;
      t.soundPool[r] && (t.soundPool[r].isDestroyed = true, t.soundPool[r].stop(), delete t.soundPool[r]);
      const a = new e.Howl({
        volume: null != o.volume ? parseFloat(o.volume) : .25,
        src: [`${"https://cdn2.majestic-files.com"}/sounds/${o.sound}.ogg`],
        loop: !!o.loop,
        pos: [o.x, o.y, o.z],
        preload: true,
        buffer: false,

        onend() {
          o.loop || this.isDestroyed || (delete t.soundPool[r], mp.trigger("animsounds.trigger", "onEnd", r));
        },

        onload() {
          mp.trigger("animsounds.trigger", "onLoad", r);
        },

        onplayerror: function () {
          this.once("unlock", function () {
            mp.trigger("animsounds.trigger", "onLoad", r);
          });
        }
      });
      a.cData = o, a.is3D = true, t.soundPool[r] = a;
    }, window.updatePlayerSoundPos = e => {
      null != (e = i(e)).px && null != e.py && null != e.pz && (r.px = e.px, r.py = e.py, r.pz = e.pz), null != e.ofx && null != e.ofy && null != e.ofz && null != e.oux && null != e.ouy && null != e.ouz && (r.ofx = e.ofx, r.ofy = e.ofy, r.ofz = e.ofz, r.oux = e.oux, r.ouy = e.ouy, r.ouz = e.ouz);
    }, window.updateSoundPos = e => {
      e = i(e);
      const n = t.soundPool[e.id];
      n && n.pos(e.x, e.y, e.z);
    }, window.setMuted = e => {
      e = i(e);
      const n = t.soundPool[e.id];
      n && (n.mute = !!e.mute);
    }, window.volume = e => {
      e = i(e);
      const n = t.soundPool[e.id];
      n && n.volume(e.volume);
    }, window.fade = e => {
      e = i(e);
      const n = t.soundPool[e.id];
      n && (e.volume && n.volume(!!e.volume), n.fade(e.from, e.to, e.duration));
    }, window.play = e => {
      e = i(e);
      const n = t.soundPool[e.id];
      n && (e.volume && n.volume(!!e.volume), n.is3D ? ((e, n) => {
        if (n.syncAudio > 0) {
          const o = e.duration(),
                t = (Date.now() - n.syncAudio) / 1e3 % o || 0;
          e.seek(t);
        } else if (!isNaN(n.startOffsetPercent)) {
          const o = e.duration(),
                t = n.startOffsetPercent * o / 100;
          e.seek(t);
        }

        const o = { ...e.pannerAttr(),
          panningModel: "equalpower",
          distanceModel: "linear",
          ...n.pannerAttr
        };
        e.pannerAttr(o), e.play(), isNaN(n.fade) || e.fade(0, n.volume, n.fade);
      })(n, n.cData) : n.play());
    }, window.pannerAttr = e => {
      e = i(e);
      const n = t.soundPool[e.id];

      if (n) {
        const o = {};
        e.pannerAttr && (o.pannerAttr = e.pannerAttr), n.cData && (n.cData = { ...n.cData,
          ...o
        }), n.pannerAttr({ ...n.pannerAttr(),
          ...o.pannerAttr
        });
      }
    }, mp.events) {
      let e = {
        stopSound: window.stopSound,
        playHudSound: window.playHudSound,
        play3DSound: window.play3DSound,
        updatePlayerSoundPos: window.updatePlayerSoundPos,
        updateSoundPos: window.updateSoundPos,
        setMuted: window.setMuted,
        fade: window.fade,
        play: window.play,
        volume: window.volume,
        pannerAttr: window.pannerAttr
      };

      for (let n in e) mp.events.add(n, e[n]);
    }
  })();
})();